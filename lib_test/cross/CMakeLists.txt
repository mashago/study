
#define cmake version
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

#1.define project and target
SET(PROJECT_NAME cross)
SET(TARGET_NAME main)
PROJECT(${PROJECT_NAME})
SET(PROJECT_PATH ${CMAKE_CURRENT_SOURCE_DIR})

#2.define make flags
SET(PROJECT_BUILD_TYPE "Debug")
SET(CMAKE_BUILD_TYPE ${PROJECT_BUILD_TYPE})
SET(CMAKE_CONFIGURATION_TYPES ${PROJECT_BUILD_TYPE})
IF(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
	SET(CMAKE_CXX_FLAGS "$ENV{CXXFLAGS} ${CMAKE_CXX_FLAGS} -std=c++11")
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -Wall")
ELSEIF(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
	ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
ENDIF()
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")

IF(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
	SET(LIBRARIES "dl")
ELSEIF(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
	IF(PROJECT_BUILD_TYPE MATCHES "Debug")
		SET(LIBRARIES "ws2_32")
		SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /NODEFAULTLIB:libcmtd.lib /NODEFAULTLIB:libcmt.lib /NODEFAULTLIB:msvcrt.lib")
	ELSEIF(PROJECT_BUILD_TYPE MATCHES "Release")
		SET(LIBRARIES "ws2_32")
		SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /NODEFAULTLIB:libcmt.lib")
	ENDIF()
ENDIF()

#3.files
FILE(GLOB FILES_SOURCE *.h *.hpp *.cpp)
SOURCE_GROUP("Sources" FILES ${FILES_SOURCE})

#4.add executable or library
ADD_EXECUTABLE(${TARGET_NAME} ${FILES_SOURCE})
TARGET_LINK_LIBRARIES(${TARGET_NAME} ${LIBRARIES})

#5.set output path
IF(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
	SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_PATH}/bin")
ELSEIF(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
	SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_PATH}/bin")
    SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_PATH}/bin")
ENDIF()

#6.add sub dir
ADD_SUBDIRECTORY(lib-src)

