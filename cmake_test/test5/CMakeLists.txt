#1.define project
#2.define compile flags
#3.define include and lib
#4.add definitions
#5.group header and sourse
#6.add sub dir if necessary
#7.add executable or library
#8.set output path

#define cmake version
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

#1.define project and target
SET(PROJECT_NAME test5)
SET(TARGET_NAME mylib)
PROJECT(${PROJECT_NAME})
SET(PROJECT_PATH ${CMAKE_CURRENT_SOURCE_DIR})

#2.define make flags and install path
SET(CMAKE_BUILD_TYPE "Debug")
SET(CMAKE_CONFIGURATION_TYPES "Debug")
IF(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
	SET(CMAKE_CXX_FLAGS "$ENV{CXXFLAGS} ${CMAKE_CXX_FLAGS} -std=c++11")
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -Wall")
ELSEIF(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
ENDIF()
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")

#3.define include and lib
INCLUDE_DIRECTORIES(
./
/usr/local/include
)

LINK_DIRECTORIES(
/usr/local/lib
)

IF(WIN32)
ELSEIF(APPLE)
ELSEIF(UNIX)
ENDIF()

MESSAGE(STATUS "CMAKE_SYSTEM = ${CMAKE_SYSTEM}")
MESSAGE(STATUS "CMAKE_SYSTEM_NAME = ${CMAKE_SYSTEM_NAME}")
IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Darwin")
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Linux")
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "CYGWIN")
ELSE ()
ENDIF()

IF(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
ELSEIF(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
ENDIF()

#4.add definitions
#ADD_DEFINITIONS(-DDEBUG)

#5.group header and sourse
FILE(GLOB FILES_HEAD *.h *.hpp)
AUX_SOURCE_DIRECTORY(. FILES_SRC)
SOURCE_GROUP("Include" FILES ${FILES_HEAD})
SOURCE_GROUP("Source" FILES ${FILES_SRC})

#6.add sub dir if necessary
#ADD_SUBDIRECTORY()

#7.add executable or library
ADD_LIBRARY(${TARGET_NAME} SHARED ${FILES_HEAD} ${FILES_SRC})

#8.set output path
IF(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
	SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${PROJECT_PATH}/lib")
ELSEIF(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
	SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY_DEBUG "${PROJECT_PATH}/lib")
ENDIF()
